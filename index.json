{"repository_name":"github.com/skippi/docspec","body":"# docspec\n\n[![Build Status](https://travis-ci.com/skippi/docspec.svg?branch=master)](https://travis-ci.com/skippi/docspec)\n[![Read the Docs (version)](https://img.shields.io/readthedocs/pip/stable.svg)](https://skippi.github.io/docspec/)\n\nA crystal library for automatically testing documentation examples.\n\nDocspec is crystal's equivalent of a doctest library.\n\n## Use Cases\n\n* Docspec encourages documentation by creating tests from it.\n* Docspec encourages testing by reducing boilerplate code for test cases.\n* Docspec encourages fast development by reducing boilerplate code for test\n  cases.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  docspec:\n    github: skippi/docspec\n```\n\n## Usage\n\nDocspec parses source files for any commented codeblocks with code in them. For\neach codeblock line with a prefix of `>>`, it executes the line and stores the\nresult. If the line also had an expression appended with `# =>`, then docspec\nwill test that the result equals the appended expression.\n\nAlternatively, you can use the `[](@doctest)` annotation instead of `>>` to\nmark entire codeblocks for doctesting.\n\nIn this example, we will fully doctest `Foo.bar` and `Foo.baz`, while ignoring doctesting for\n`Foo.add`. Note the usage of `>>` and `[](@doctest)`:\n\n```crystal\n# src/foo.cr\n\nmodule Foo\n  # Returns \"hello world\".\n  #\n  # ```\n  # >> Foo.bar # => \"hello world\"\n  #\n  # >> name = \"say #{Foo.bar}\"\n  # >> name # => \"say hello world\"\n  # ```\n  def self.bar\n    \"hello world\"\n  end\n\n  # Subtracts two numbers.\n  #\n  # [](@doctest)\n  # ```\n  # Foo.baz(4, 2) # => 2\n  # Foo.baz(-8, -4) # => -4\n  # ```\n  def self.baz(a, b)\n    a - b\n  end\n\n  # Adds two numbers.\n  #\n  # ```\n  # Foo.add(1, 3) # => 4\n  # Foo.add(-2, -4) # => -6\n  # ```\n  def self.add(a, b)\n    a + b\n  end\nend\n```\n\nRequire docspec and doctest the source file using a relative path:\n\n```crystal\n# spec/foo_spec.cr\n\nrequire \"docspec\"\n\nDocspec.doctest(\"../src/foo.cr\")\n```\n\nLastly, run your tests in your project's root directory.\n\n```bash\ncrystal spec\n```\n\n## Documentation\n\n* [Official docs](https://skippi.github.io/docspec/)\n\n## Contributing\n\n1. Fork it ( [https://github.com/skippi/docspec/fork](https://github.com/skippi/docspec/fork) )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n* [skippi](https://github.com/skippi)  - creator, maintainer\n","program":{"html_id":"github.com/skippi/docspec/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/skippi/docspec","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/skippi/docspec/Docspec","path":"Docspec.html","kind":"module","full_name":"Docspec","name":"Docspec","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"docspec/version.cr","line_number":1,"url":"https://github.com/skippi/docspec/blob/18cfe68aee7067583d784f68d784491a86c2aead/src/docspec/version.cr"},{"filename":"docspec.cr","line_number":6,"url":"https://github.com/skippi/docspec/blob/18cfe68aee7067583d784f68d784491a86c2aead/src/docspec.cr"}],"repository_name":"github.com/skippi/docspec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"CODEBLOCK_REGEX","value":"/^\\s*#\\s*```/","doc":null,"summary":null},{"name":"COMMENT_REGEX","value":"/^\\s*#/","doc":null,"summary":null},{"name":"DOCTEST_ANNOTATION_REGEX","value":"/^\\s*#\\s?\\[\\]\\(@doctest\\)/","doc":null,"summary":null},{"name":"DOCTEST_PREFIX","value":"/^>>/","doc":null,"summary":null},{"name":"DOCTEST_RESULT_PREFIX","value":"/# =>/","doc":null,"summary":null},{"name":"VERSION","value":"\"0.3.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The main module of the docspec library.\n\nRefer to the top level README for usage.","summary":"<p>The main module of the docspec library.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"doctest(filename)-macro","html_id":"doctest(filename)-macro","name":"doctest","doc":"Parses *filename* for marked examples to create specs.","summary":"<p>Parses <em>filename</em> for marked examples to create specs.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"args_string":"(filename)","source_link":"https://github.com/skippi/docspec/blob/18cfe68aee7067583d784f68d784491a86c2aead/src/docspec.cr#L14","def":{"name":"doctest","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% calling_dir = filename.filename.gsub(/[^\\/]*$/, \"\") %}\n{% parser = {mode: :default, doctest_all: false} %}\n{% for line, index in (`cd #{calling_dir} && cat #{filename}`).lines %}{% if line =~ Docspec::CODEBLOCK_REGEX %}{% parser[:mode] = (parser[:mode] == (:codeblock)) ? :default : :codeblock %}{% else %}{% if line =~ Docspec::DOCTEST_ANNOTATION_REGEX %}{% parser[:doctest_all] = true %}{% else %}{% if line =~ Docspec::COMMENT_REGEX %}{% if parser[:mode] == (:codeblock) %}Docspec.doctest_code_line({{ line.strip }}, {{ filename }}, {{ index + 1 }}, {{ parser }})\n        {% else %}{% parser[:doctest_all] = false %}Docspec.doctest_comment({{ line.strip }}, {{ filename }}, {{ index + 1 }})\n        {% end %}{% else %}{% if !line.strip.empty? %}{% parser[:mode] = :default %}{% parser[:doctest_all] = false %}{% end %}{% end %}{% end %}{% end %}{% end %}\n"}}],"types":[]}]}}